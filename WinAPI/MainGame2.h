#pragma once
#include "GameNode.h"
#define _USE_MATH_DEFINES
#include <math.h>
#define PI 3.141592653f //상수화 

#define DEGREE_RADIAN(_deg)		(M_PI * (_deg)/ 180.0f)
#pragma region 삼각함수
/*
▶ 삼각함수

- 수학에서의 삼각함수는 직각 삼각형의 각을 직각 삼각형 변들의 길이 비로 나타내는 함수이다
 ㄴ직각삼각형일때면 성립이 된다

- 주로 각도를 이용할때 삼각함수가 필요핟닫
	ㄴex: 발사체으 각도/ 캐릭터의 대각선 이동 / 스킬의 범위설정 등(부채꼴)
	ㄴ 더 나아가면 파동규칙을 통해 일정한 루틴을 만들거나 힘,물리연산도 가능하다 / 가능한선에서

▷ 삼각함수 하면 기억할 3가지

- 빗변:l   -> 대변(높이) :h       -> 밑변: b

1. 사인(sin)
- 사인은 빗변과 높이으 비율을 구해주는 함수
sinθ = 대변 / 빗변 -> h/l

2. 코사인(cos)
- 빗변과 밑변의 비율을 계산해 주는 함수
ㄴ cosθ = 밑변 / 빗변 = b / l

3. 탄젠트(tan)
- 직각 삼각혀ㅇ에서 어떠한 각도를 넣었을때 대변과 대변의 비율을 구해준다
ㄴ tan(45도) = 1
ㄴ tanθ = 대변 / 밑변 = h / b



▶ 프로그래밍에서의 삼각함수
 
 - api는 윈도우 좌표계를 사용한다

 - 윈도우 좌표계는 데카르드 좌표계와는 달리 y 축이 아래로 내려갈수록 증감이 되기 때문에
  ㄴ y좌표를 구할떄 별다른 처리를 하지 않았다면 sin앞에 - 기호를 붙혀야 한다

  ※ 기억해야할 개념

  - PI
  ㄴ 원주(원의 둘레) 와 지름(원의 중심을 관통해서 원의 한쪽 끝에서 반대쪽 끝까지 가로지르는 선)의 길이를 비로 나타낸다

  - 호도법
  ㄴ 각도를 나타내는 표현 방법중에 하나 -> 호의 길이로 각도를 표기하는 표기법
  ㄴ PI를 사용해 각도를 표시하는것
  ㄴ 이를 호도법이라고 한다
  ㄴ 호도법을 사용해야 하는 이유는 컴퓨터는 각도를 인식할때 도를 사용할 수 없다.
  ㄴ 반지름의 길이와 가은 호에 대한 중심각을 1호도 (라디안) 이라고 한다.

  - 라디안
  ㄴ 호도법을 표기할때 사용하는 단위
  ㄴ 반지름과 호의 길이가 같은 값을 1라디안 이라고 정의한다.
  ㄴ 1 라디안 = 57.3도


  - 도
	ㄴ 일반적으로 사용하는 각의 단위 (각도)
	ㄴ 도수법/ 각도표기라고 불린다
	ㄴ 한바퀴를 360도로 정의한다

  - 60분법
  ㄴ 원의 둘레를 360등분하여 각의 크기를 나타내는 방법
  ㄴ PI (원주율):3.14

  ㄴ 원의 둘레: 2 * PI * 반지름
  ㄴ 원의 넓이: 반지름 * 반지름 * PI

  - 런타임에서 무언가를 찾을때 사용하는 경우가 많음

  ⊙ 원에 많이 숙달된 것이 아니면 웬만하면 사용을 지양하는 것이 좋다
  why? 코스트가 매우 쌤

  ★ PI의 라디안값은 180도

  -그렇기떄문에 공식이 성립할 수 있다

  - 디글 (Degree)
  ㄴ 180도 = pi 라디안
  ㄴ 1도 = pi / 180 라디안
  ㄴ x도 =  x * PI / 180 라디안

  - 라디안
  ㄴ PI 라디안 = 180도
  ㄴ 1라디안 = 180 / PI도
  ㄴ X 라디안 = X * 180 / PI 도

 ※ 부채꼴 모양에서는 반지름,호,중심각중에 2가지만 알 수 있으면 다른 1가지도 구할 수 있다.

 ▷ 기본 공식

 1. 두 점 사이의 거리를 구하는 공식
 ㄴ 두 점을 안다(start/end) -> 서로의 거리를 안다 -> 목표 지점에서 시작 지점을 뺸다
	ㄴ END - START = 두 점 사이의 거리 -> 뺸 만큼의 차

ㄴ 위의 공식으로 각 점(x,y) 사이의 델타량을 구한다
	ㄴDeltaX, DeltaY
2. 대각선 (빗변)의 거리
ㄴ Dinstance(빗변) = sqrt(DeltaX * DeltaX + DeltaY * DeltaY)       
						ㄴ ◈ sqrt() 제곱근 구하는 함수

3. 각을 구한다 (이것도 기본적으로 공식을 활용하자)

-float angle = acos (DeltaX / Dinstance);
	ㄴ 삼각 함수: 각도를 넣어서 각도 계산
	ㄴ 역삼각함수 : 삼각함수의 결과값을통해 각도를 계산한다.
		ㄴ 일반적으로 삼각함수 앞에 arc 혹은 a로 표기
		일반적으로(플레이어는 삼각함수 적은 역삼각함수를 쓰는 경우가 많다)

- 각도에 대한 변이량을 구한다
	ㄴ float DeltaX = cos(라디안) * Distance(이동량);
	ㄴ float DeltaY = -sin(라디안) * Distance(이동량);

4. x축 좌표 구하기
ㄴ x = cos(각도 * PI / 180) * 속도;

5. y축 좌표 구하기
ㄴ y = -sin(각도 * PI/ 180) * 속도;

*/
#pragma endregion

/*
면접문제
※ IntersectRect() : 교집합을 구하는 함수
- 첫번째 인자는 두 사각형 A,B가 충돌됐을때 생기는 사각형. 
- 이 부분에 크기가 존재한다면 충돌이 된것이고 안된다면 충돌이 안된것
- 2번 인자의 렉트와 3번 인자의 렉트가 겹치는 영역이 생기면 1번렉트에 저장을 한다.
- 충돌을 감지하면 충돌한 인자의 포인터 전달
ㄴ 충돌이 없으면 0
ㄴ 충돌이 발생한 상황이라면 NON ZERO반환
*/
struct STAR //확장성을 위해
{
	int x;
	int y;
};


class MainGame2 : public GameNode
{
private:
	GImage* _bgImage;
	GImage* _plImage;
	RECT _rc;

	float _radian;
	float _degree;

	SYSTEMTIME _st; //시간관련 구조체 (os가 가지고있는 시간을 우리 프로젝트로 가져오기 위한 구조체)
	HPEN _currentStarPen;
	STAR _star[5]; 

public:

	HRESULT init(void);
	void release(void);
	void update(void);
	void render(HDC hdc);



	MainGame2();
	~MainGame2();
};

